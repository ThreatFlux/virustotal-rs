import { describe, it, expect, vi } from 'vitest'
import { render, screen } from '@testing-library/react'
import { MalwareChart } from '../MalwareChart'

// Mock recharts components
vi.mock('recharts', () => ({
  ResponsiveContainer: ({ children }: any) => <div data-testid="responsive-container">{children}</div>,
  PieChart: ({ children }: any) => <div data-testid="pie-chart">{children}</div>,
  Pie: ({ children, data, label, outerRadius, dataKey }: any) => (
    <div data-testid="pie" data-outerradius={outerRadius} data-datakey={dataKey}>
      {JSON.stringify(data)}
      {children}
    </div>
  ),
  Cell: ({ fill }: any) => <div data-testid="cell" data-fill={fill} />,
  Tooltip: ({ content }: any) => <div data-testid="tooltip">{content}</div>,
  Legend: ({ formatter, wrapperStyle }: any) => <div data-testid="legend" data-fontsize={wrapperStyle?.fontSize} />
}))

// Mock UI components
vi.mock('@/components/ui/card', () => ({
  Card: ({ children }: any) => <div data-testid="card">{children}</div>,
  CardContent: ({ children }: any) => <div data-testid="card-content">{children}</div>,
  CardHeader: ({ children }: any) => <div data-testid="card-header">{children}</div>,
  CardTitle: ({ children, className }: any) => <h3 className={className} data-testid="card-title">{children}</h3>
}))

// Mock lucide-react
vi.mock('lucide-react', () => ({
  Shield: (props: any) => <div data-testid="shield-icon" {...props} />
}))

describe('MalwareChart', () => {
  const defaultProps = {
    malicious: 45,
    suspicious: 20,
    clean: 150,
    undetected: 35
  }

  describe('Component Rendering', () => {
    it('renders the chart with title and icon', () => {
      render(<MalwareChart {...defaultProps} />)
      
      expect(screen.getByTestId('card')).toBeInTheDocument()
      expect(screen.getByTestId('card-title')).toBeInTheDocument()
      expect(screen.getByText('Detection Overview')).toBeInTheDocument()
      expect(screen.getByTestId('shield-icon')).toBeInTheDocument()
    })

    it('renders chart components when data is provided', () => {
      render(<MalwareChart {...defaultProps} />)
      
      expect(screen.getByTestId('responsive-container')).toBeInTheDocument()
      expect(screen.getByTestId('pie-chart')).toBeInTheDocument()
      expect(screen.getByTestId('pie')).toBeInTheDocument()
      expect(screen.getByTestId('tooltip')).toBeInTheDocument()
      expect(screen.getByTestId('legend')).toBeInTheDocument()
    })

    it('displays chart with correct data attributes', () => {
      render(<MalwareChart {...defaultProps} />)
      
      const pie = screen.getByTestId('pie')
      expect(pie).toHaveAttribute('data-outerradius', '80')
      expect(pie).toHaveAttribute('data-datakey', 'value')
    })
  })

  describe('Loading State', () => {
    it('displays loading state when isLoading is true', () => {
      render(<MalwareChart {...defaultProps} isLoading={true} />)
      
      expect(screen.getByTestId('card-title')).toBeInTheDocument()
      expect(screen.getByText('Detection Overview')).toBeInTheDocument()
      
      // Should show loading skeleton
      const loadingDiv = document.querySelector('.animate-pulse')
      expect(loadingDiv).toBeInTheDocument()
      expect(loadingDiv).toHaveClass('w-40', 'h-40', 'bg-muted', 'rounded-full')
    })

    it('does not render chart components when loading', () => {
      render(<MalwareChart {...defaultProps} isLoading={true} />)
      
      expect(screen.queryByTestId('responsive-container')).not.toBeInTheDocument()
      expect(screen.queryByTestId('pie-chart')).not.toBeInTheDocument()
    })
  })

  describe('Empty State', () => {
    it('displays empty state when all values are zero', () => {
      render(<MalwareChart malicious={0} suspicious={0} clean={0} undetected={0} />)
      
      expect(screen.getByText('Detection Overview')).toBeInTheDocument()
      expect(screen.getByText('No detection data available')).toBeInTheDocument()
    })

    it('does not render chart components when data is empty', () => {
      render(<MalwareChart malicious={0} suspicious={0} clean={0} undetected={0} />)
      
      expect(screen.queryByTestId('responsive-container')).not.toBeInTheDocument()
      expect(screen.queryByTestId('pie-chart')).not.toBeInTheDocument()
    })
  })

  describe('Data Processing', () => {
    it('filters out zero values from chart data', () => {
      render(<MalwareChart malicious={45} suspicious={0} clean={150} undetected={0} />)
      
      const pie = screen.getByTestId('pie')
      const pieData = JSON.parse(pie.textContent || '[]')
      
      // Should only have malicious and clean data
      expect(pieData).toHaveLength(2)
      expect(pieData.some((item: any) => item.name === 'Malicious')).toBe(true)
      expect(pieData.some((item: any) => item.name === 'Clean')).toBe(true)
      expect(pieData.some((item: any) => item.name === 'Suspicious')).toBe(false)
      expect(pieData.some((item: any) => item.name === 'Undetected')).toBe(false)
    })

    it('includes all categories when values are non-zero', () => {
      render(<MalwareChart {...defaultProps} />)
      
      const pie = screen.getByTestId('pie')
      const pieData = JSON.parse(pie.textContent || '[]')
      
      expect(pieData).toHaveLength(4)
      expect(pieData.some((item: any) => item.name === 'Malicious')).toBe(true)
      expect(pieData.some((item: any) => item.name === 'Suspicious')).toBe(true)
      expect(pieData.some((item: any) => item.name === 'Clean')).toBe(true)
      expect(pieData.some((item: any) => item.name === 'Undetected')).toBe(true)
    })

    it('adds total count to chart data', () => {
      render(<MalwareChart {...defaultProps} />)
      
      const pie = screen.getByTestId('pie')
      const pieData = JSON.parse(pie.textContent || '[]')
      
      const expectedTotal = 45 + 20 + 150 + 35
      pieData.forEach((item: any) => {
        expect(item.total).toBe(expectedTotal)
      })
    })

    it('preserves original data values', () => {
      render(<MalwareChart {...defaultProps} />)
      
      const pie = screen.getByTestId('pie')
      const pieData = JSON.parse(pie.textContent || '[]')
      
      const maliciousItem = pieData.find((item: any) => item.name === 'Malicious')
      const suspiciousItem = pieData.find((item: any) => item.name === 'Suspicious')
      const cleanItem = pieData.find((item: any) => item.name === 'Clean')
      const undetectedItem = pieData.find((item: any) => item.name === 'Undetected')
      
      expect(maliciousItem.value).toBe(45)
      expect(suspiciousItem.value).toBe(20)
      expect(cleanItem.value).toBe(150)
      expect(undetectedItem.value).toBe(35)
    })
  })

  describe('Chart Configuration', () => {
    it('renders cells for each data item', () => {
      render(<MalwareChart {...defaultProps} />)
      
      const cells = screen.getAllByTestId('cell')
      expect(cells).toHaveLength(4) // All 4 categories have values > 0
    })

    it('applies CSS color variables to cells', () => {
      render(<MalwareChart {...defaultProps} />)
      
      const cells = screen.getAllByTestId('cell')
      
      // Check that cells have data-fill attributes with CSS variables
      expect(cells.some(cell => cell.getAttribute('data-fill')?.includes('hsl(var(--malicious))'))).toBe(true)
      expect(cells.some(cell => cell.getAttribute('data-fill')?.includes('hsl(var(--suspicious))'))).toBe(true)
      expect(cells.some(cell => cell.getAttribute('data-fill')?.includes('hsl(var(--clean))'))).toBe(true)
      expect(cells.some(cell => cell.getAttribute('data-fill')?.includes('hsl(var(--undetected))'))).toBe(true)
    })

    it('configures legend with correct font size', () => {
      render(<MalwareChart {...defaultProps} />)
      
      const legend = screen.getByTestId('legend')
      expect(legend).toHaveAttribute('data-fontsize', '12px')
    })
  })

  describe('Accessibility', () => {
    it('provides semantic card structure', () => {
      render(<MalwareChart {...defaultProps} />)
      
      expect(screen.getByTestId('card')).toBeInTheDocument()
      expect(screen.getByTestId('card-header')).toBeInTheDocument()
      expect(screen.getByTestId('card-content')).toBeInTheDocument()
    })

    it('uses proper heading hierarchy', () => {
      render(<MalwareChart {...defaultProps} />)
      
      const title = screen.getByTestId('card-title')
      expect(title.tagName).toBe('H3')
    })

    it('includes descriptive title with icon', () => {
      render(<MalwareChart {...defaultProps} />)
      
      expect(screen.getByText('Detection Overview')).toBeInTheDocument()
      expect(screen.getByTestId('shield-icon')).toBeInTheDocument()
    })
  })

  describe('Custom Tooltip', () => {
    // Note: Testing the CustomTooltip component directly would require more complex setup
    // In a real test environment, you might render it separately or use integration tests
    
    it('renders tooltip component', () => {
      render(<MalwareChart {...defaultProps} />)
      
      expect(screen.getByTestId('tooltip')).toBeInTheDocument()
    })
  })

  describe('Chart Layout', () => {
    it('uses responsive container for chart sizing', () => {
      render(<MalwareChart {...defaultProps} />)
      
      const container = screen.getByTestId('responsive-container')
      expect(container).toBeInTheDocument()
    })

    it('sets correct height for chart container', () => {
      render(<MalwareChart {...defaultProps} />)
      
      const chartContainer = document.querySelector('.h-80')
      expect(chartContainer).toBeInTheDocument()
    })

    it('centers loading content', () => {
      render(<MalwareChart {...defaultProps} isLoading={true} />)
      
      const loadingContainer = document.querySelector('.h-80.flex.items-center.justify-center')
      expect(loadingContainer).toBeInTheDocument()
    })

    it('centers empty state content', () => {
      render(<MalwareChart malicious={0} suspicious={0} clean={0} undetected={0} />)
      
      const emptyContainer = document.querySelector('.h-80.flex.items-center.justify-center')
      expect(emptyContainer).toBeInTheDocument()
    })
  })

  describe('Edge Cases', () => {
    it('handles single non-zero value', () => {
      render(<MalwareChart malicious={100} suspicious={0} clean={0} undetected={0} />)
      
      const pie = screen.getByTestId('pie')
      const pieData = JSON.parse(pie.textContent || '[]')
      
      expect(pieData).toHaveLength(1)
      expect(pieData[0].name).toBe('Malicious')
      expect(pieData[0].value).toBe(100)
      expect(pieData[0].total).toBe(100)
    })

    it('handles very large numbers', () => {
      const largeProps = {
        malicious: 999999,
        suspicious: 888888,
        clean: 777777,
        undetected: 666666
      }
      
      render(<MalwareChart {...largeProps} />)
      
      const pie = screen.getByTestId('pie')
      const pieData = JSON.parse(pie.textContent || '[]')
      
      expect(pieData).toHaveLength(4)
      const total = 999999 + 888888 + 777777 + 666666
      pieData.forEach((item: any) => {
        expect(item.total).toBe(total)
      })
    })

    it('handles optional isLoading prop default value', () => {
      render(<MalwareChart {...defaultProps} />)
      
      // Should not show loading state when isLoading is not specified
      expect(screen.queryByTestId('responsive-container')).toBeInTheDocument()
      expect(document.querySelector('.animate-pulse')).not.toBeInTheDocument()
    })
  })

  describe('Styling', () => {
    it('applies proper CSS classes to title', () => {
      render(<MalwareChart {...defaultProps} />)
      
      const title = screen.getByTestId('card-title')
      expect(title).toHaveClass('flex', 'items-center', 'space-x-2')
    })

    it('applies muted text color to empty state', () => {
      render(<MalwareChart malicious={0} suspicious={0} clean={0} undetected={0} />)
      
      const emptyText = document.querySelector('.text-muted-foreground')
      expect(emptyText).toBeInTheDocument()
      expect(emptyText).toHaveTextContent('No detection data available')
    })
  })
})