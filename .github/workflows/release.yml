name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      env:
        EVENT_NAME: ${{ github.event_name }}
        INPUT_VERSION: ${{ github.event.inputs.version }}
        GITHUB_REF: ${{ github.ref }}
      run: |
        if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
          echo "version=$INPUT_VERSION" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Verify version matches Cargo.toml
      run: |
        CARGO_VERSION="v$(grep '^version =' Cargo.toml | head -1 | sed 's/.*"\(.*\)".*/\1/')"
        if [ "${{ steps.version.outputs.version }}" != "$CARGO_VERSION" ]; then
          echo "Version mismatch: tag ${{ steps.version.outputs.version }} != Cargo.toml $CARGO_VERSION"
          exit 1
        fi

    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract version-specific changelog
          awk '/^## \[${{ steps.version.outputs.version }}\]/{flag=1;next}/^## \[/{flag=0}flag' CHANGELOG.md > release_notes.md
        else
          echo "Release ${{ steps.version.outputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> release_notes.md || echo "- Initial release" >> release_notes.md
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: VirusTotal Rust SDK ${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}

  build-and-test:
    name: Build and Test
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@5d458579430fc14a04a08a1e7d3694f545e91ce6 # stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install openssl pkg-config

    - name: Build release
      run: cargo build --release --all-features --target ${{ matrix.target }}

    - name: Run tests
      run: cargo test --release --all-features --target ${{ matrix.target }}

    - name: Package artifacts (Unix)
      if: runner.os != 'Windows'
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/release/examples/* artifacts/ 2>/dev/null || true
        tar -czf virustotal-rs-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz -C artifacts .

    - name: Package artifacts (Windows)
      if: runner.os == 'Windows'
      run: |
        mkdir artifacts
        copy target\${{ matrix.target }}\release\examples\*.exe artifacts\ 2>nul || echo "No examples to copy"
        7z a virustotal-rs-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip artifacts\*

    - name: Upload Release Asset (Unix)
      if: runner.os != 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./virustotal-rs-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz
        asset_name: virustotal-rs-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Asset (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./virustotal-rs-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip
        asset_name: virustotal-rs-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip
        asset_content_type: application/zip

  publish-crate:
    name: Publish to crates.io
    needs: [create-release, build-and-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@5d458579430fc14a04a08a1e7d3694f545e91ce6 # stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-publish-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  update-documentation:
    name: Update Documentation
    needs: [create-release, publish-crate]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@5d458579430fc14a04a08a1e7d3694f545e91ce6 # stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Generate documentation
      run: |
        cargo doc --all-features --no-deps
        echo '<meta http-equiv="refresh" content="0; url=virustotal_rs">' > target/doc/index.html

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@47f197a2200bb9de68ba5f48fad1c088eb1c4a32 # v4.0.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        cname: virustotal-rs-docs.threatflux.com

  notify:
    name: Notify
    needs: [create-release, build-and-test, publish-crate, update-documentation]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notification
      run: |
        if [ "${{ needs.build-and-test.result }}" = "success" ] && [ "${{ needs.publish-crate.result }}" = "success" ]; then
          echo "✅ Release ${{ needs.create-release.outputs.version }} completed successfully!"
        else
          echo "❌ Release ${{ needs.create-release.outputs.version }} failed"
          exit 1
        fi