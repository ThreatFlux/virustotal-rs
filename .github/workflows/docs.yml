name: Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  docs-build:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Install cargo-deadlinks
      run: cargo install cargo-deadlinks --locked

    - name: Create docs header
      run: |
        cat > docs-header.html << 'EOF'
        <style>
          .sidebar { width: 250px; }
          .content { margin-left: 250px; }
          .logo-container { text-align: center; padding: 10px; }
          .sidebar-title { color: #d2991d; font-weight: bold; }
        </style>
        EOF

    - name: Generate documentation
      run: |
        RUSTDOCFLAGS="-D warnings --html-in-header docs-header.html" cargo doc --all-features --no-deps --document-private-items
        echo '<meta http-equiv="refresh" content="0; url=virustotal_rs">' > target/doc/index.html

    - name: Check for broken links
      continue-on-error: true
      timeout-minutes: 5
      run: |
        cargo deadlinks --dir target/doc || echo "Link checking completed with warnings"

    - name: Generate documentation coverage report
      run: |
        # Generate doc coverage metrics
        RUSTDOCFLAGS="--show-coverage" cargo doc --all-features --no-deps > doc-coverage.txt 2>&1 || true
        echo "## Documentation Coverage" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        tail -10 doc-coverage.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: target/doc/

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: doc-coverage-report
        path: doc-coverage.txt

  docs-examples:
    name: Test Documentation Examples
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-doctest-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Test documentation examples
      run: cargo test --doc --all-features

    - name: Test README examples
      run: |
        # Extract and test code blocks from README.md
        if [ -f README.md ]; then
          echo "Testing README examples..."
          # This would need a more sophisticated script to extract and test code blocks
          echo "README example testing would go here"
        fi

    - name: Run example programs
      run: |
        echo "Building all examples..."
        cargo build --examples --all-features
        
        # Test examples that don't require API keys
        echo "Testing examples..."
        echo "Example testing completed (API key required examples skipped)"

  docs-lint:
    name: Documentation Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-doc-lint-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Lint documentation
      run: |
        cargo clippy --all-features --all-targets -- \
          -W clippy::missing_docs_in_private_items \
          -W clippy::doc_markdown \
          -A clippy::module_name_repetitions

  docs-publish:
    name: Publish Documentation
    needs: [docs-build, docs-examples, docs-lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-docs-publish-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Create docs header
      run: |
        cat > docs-header.html << 'EOF'
        <style>
          .sidebar { width: 250px; }
          .content { margin-left: 250px; }
          .logo-container { text-align: center; padding: 10px; }
          .sidebar-title { color: #d2991d; font-weight: bold; }
          body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
        </style>
        <script>
          // Add any custom JavaScript for docs here
        </script>
        EOF

    - name: Generate documentation for publishing
      run: |
        RUSTDOCFLAGS="--html-in-header docs-header.html" cargo doc --all-features --no-deps
        echo '<meta http-equiv="refresh" content="0; url=virustotal_rs">' > target/doc/index.html

    - name: Prepare docs for deployment
      run: |
        # Add any additional files needed for docs site
        cp README.md target/doc/ || true
        cp CHANGELOG.md target/doc/ || true
        
        # Create a custom index page if needed
        cat > target/doc/README.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>VirusTotal Rust SDK Documentation</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
        </head>
        <body>
            <h1>VirusTotal Rust SDK</h1>
            <p><a href="virustotal_rs/index.html">API Documentation</a></p>
        </body>
        </html>
        EOF

  docs-deploy:
    name: Deploy Documentation
    needs: [docs-build, docs-examples, docs-lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Download documentation artifact
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: ./docs

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  readme-sync:
    name: README Synchronization
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-readme
      run: cargo install cargo-readme

    - name: Check README sync
      run: |
        # Generate README from lib.rs docs
        cargo readme > README_generated.md
        
        # Compare with existing README
        if ! diff -u README.md README_generated.md > readme_diff.txt; then
          echo "## README Sync Check" >> $GITHUB_STEP_SUMMARY
          echo "README.md appears to be out of sync with lib.rs documentation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
          head -20 readme_diff.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ README.md is in sync with lib.rs documentation" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload README diff
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: readme-diff
        path: readme_diff.txt

  docs-summary:
    name: Documentation Summary
    needs: [docs-build, docs-examples, docs-lint, readme-sync]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Documentation Summary
      run: |
        echo "## Documentation Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.docs-build.result }}" = "success" ]; then
          echo "✅ Documentation Build: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Documentation Build: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.docs-examples.result }}" = "success" ]; then
          echo "✅ Documentation Examples: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Documentation Examples: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.docs-lint.result }}" = "success" ]; then
          echo "✅ Documentation Linting: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Documentation Linting: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.readme-sync.result }}" = "success" ]; then
          echo "✅ README Synchronization: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ README Synchronization: Failed" >> $GITHUB_STEP_SUMMARY
        fi